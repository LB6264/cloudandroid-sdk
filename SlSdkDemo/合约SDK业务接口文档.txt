1.功能介绍
	该文档为合约SDK接入文档
2.准备工作
	导入SDK包
		1.导入sdklibrary-release_1.0.aar
		2.导入如下依赖：
				 api 'com.squareup.okhttp3:okhttp:3.11.0'
                 api 'org.web3j:core:3.0.1-android'
                 api 'org.apache.httpcomponents:httpcore:4.4.2'
3.配置AndroidManifest
  在工程AndroidManifest.xml中配置用户权限 请将下面权限配置代码复制到 AndroidManifest.xml 文件中 :
	<uses-permission android:name="android.permission.INTERNET" />
	<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
	<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
4.混淆配置
   -keep class  com.bmtc.sdk.library.**{
          *;
            }
5.代码接入
        //初始化
        SLSDKAgent.init(this);
        //控制日志输出
        SLSDKAgent.setLogEnabled(true);
        //设置http接口相关参数
        HttpRequestConfigs httpRequestConfigs = new HttpRequestConfigs()
                    .setPrefixHeader("GGEX")//设置header前缀
                    .setHttpDevHost("devapi.ggex.com")//设置HTTP接口请求域名
                    .setHttpReleaseHost("api.ggex.com")
                    .setHttpPrivateKey("OZ1WNXAlbe84Kpq0"); //设置接口加密密钥
         SLSDKAgent.setHttpRequestConfigs(httpRequestConfigs);
         //设置域名接口环境
         SLSDKAgent.setHttpIsDev(true);
        //构造用户user相关信息
        SLUser user = new SLUser();
        user.setUid("35236485");
        user.setToken("d28d8978ca3d11e9b4280242ac120004");
        //设置全局user对象
        SLSDKAgent.bindSLUser(user);
        //注册SDK请求客服端事件监听
        SLSDKAgent.registerSLSDKRequestListener(this);
        //注册合约Ticker监听
        SLSDKAgent.registerContractTickerListener(this);
        //订阅合约
        List<String> contracts = new ArrayList<>();
        contracts.add("1");
        contracts.add("2");
        SLSDKAgent.sendContractSubscribe(LogicWebSocketContract.WEBSOCKET_TICKER,contracts);
6.合约相关业务接口都在BTContract类中,合约相关结算公式在ContractCalculate类中
	6.1：合约市场：可在未登录下调用
        1.contracts(int contractID, IResponse<List<ContractBasic>> response) //获取合约列表
		2.tickers(final int contractID, IResponse<List<ContractTicker>> response) //获取合约的最新行情
		3.queryDepth(int contractID, int count, IResponse<Depth> response) //获取合约的深度
		4.queryContractSpot(int contractId, long startTime, long endTime, int unit, String resolution, IResponse<List<ContractSpot>> response)//获取K线数据
		5.riskReserves(int contractID, IResponse<List<InsuranceFund>> response)//获取合约的保险金记录
		6.trades(int contractID, IResponse<List<ContractTrade>> response)//获取合约的交易记录
		7.fundingrate(int contractID, IResponse<List<ContractFundingRate>> response)// 获取资金费率
		8.indexes(IResponse<List<ContractIndex>> response)//获取指数列表
		
	6.2：合约交易：需要在登录后SLSDKAgent.bindSLUser(user);;  才能调用
		1.createContractAccount(int contractId, IResponse<Void> response) //创建合约账户
		2.accounts(final int contractID, IResponse<List<ContractAccount>> response)//获取合约账户信息
		3.userOrders(final int contractID, int offset, int size, final int status, IResponse<List<ContractOrder>> response) //获取用户订单记录
		4.userPositions(final int contractID, final int status, int offset, int size, IResponse<List<ContractPosition>> response) //获取用户仓位
		5.userPlanOrders(final int contractID, int offset, int size, final int status, IResponse<List<ContractOrder>> response)//获取用户计划委托记录
		6.userTrades(int contractID, IResponse<List<ContractTrade>> response) //获取用户的交易记录
		7.submitOrder(ContractOrder order, IResponse<String> response)//单次提交订单
		8.submitOrder(ContractOrder order, String pwd, IResponse<String> response)//单次提交订单
		9.cancelOrders(ContractOrders orders, IResponse<List<Long>> response)//取消订单
		10.cancelOrders(ContractOrders orders, String pwd, IResponse<List<Long>> response)//取消订单
		11.submitPlanOrder(ContractOrder order, IResponse<String> response)//提交委托订单
		12.submitPlanOrder(ContractOrder order, String pwd, IResponse<String> response)//提交委托订单
		13.cancelPlanOrders(ContractOrders orders, IResponse<List<Long>> response)//取消计划委托
		14.cancelPlanOrders(ContractOrders orders, String pwd, IResponse<List<Long>> response)//取消计划委托
		15.transferFunds(ContractTransfer contractTransfer, IResponse<Void> response)//资金划转
		16.liqRecord(long orderID, IResponse<List<ContractLiqRecord>> response)//获取用户的爆仓记录
		17.marginOper(int contractId, long positionId, String vol, int operType, IResponse<Void> response) //给逐仓仓位追加或减少保证金
		18.checkOpenAccountReward(IResponse<AccountReward> response)//检查合约账户开通奖励是否被领取
		19.receiveOpenAccountReward(IResponse<Void> response)//领取合约账户开通奖励
		20.checkDepositReward(IResponse<AccountReward> response)//检查合约充值奖励是否被领取
		21.receiveDepositReward(IResponse<Void> response)//检查合约充值奖励是否被领取
		22.calculate(int contractId, int mask, long positionId, final boolean longShort, IResponse<ContractPosition> response)//计算保证金


    6.websocket接入
        //订阅主题
        public static final String WEBSOCKET_TRADE = "Trade";       //最新成交
        public static final String WEBSOCKET_PNL = "PNL";         //自动减仓排名
        public static final String WEBSOCKET_TICKER = "Ticker";      //实时价格
        public static final String WEBSOCKET_DEPTH = "Depth";       //深度
        public static final String WEBSOCKET_BIN1M = "QuoteBin1m";  //1分钟行情数据
        public static final String WEBSOCKET_BIN5M = "QuoteBin5m";  //5分钟行情数据
        public static final String WEBSOCKET_BIN15M = "QuoteBin15m";  //15分钟行情数据
        public static final String WEBSOCKET_BIN30M = "QuoteBin30m"; //30分钟行情数据
        public static final String WEBSOCKET_BIN1H = "QuoteBin1h";  //1小时行情数据
        public static final String WEBSOCKET_BIN2H = "QuoteBin2h";  //2小时行情数据
        public static final String WEBSOCKET_BIN4H = "QuoteBin4h";  //4小时行情数据
        public static final String WEBSOCKET_BIN6H = "QuoteBin6h";  //6小时行情数据
        public static final String WEBSOCKET_BIN12H = "QuoteBin12h"; //12小时行情数据
        public static final String WEBSOCKET_BIN1D = "QuoteBin1d";  //日行情数据
        public static final String WEBSOCKET_BIN1W = "QuoteBin1w";  //周行情数据
        public static final String WEBSOCKET_UNICAST = "unicast";  //私有数据
        public static final String WEBSOCKET_CUD = "CUD";  //私有数据
	6.1：订阅合约信息：
		//注册合约监听
        SLSDKAgent.registerContractListener(this);
        //批量订阅合约实时价格
        List<String> list = new ArrayList<>();
        list.add("BTC/USDT");
        list.add("ETH/USDT");
        SLSDKAgent.sendContractSubscribe(LogicWebSocketSpot.WEBSOCKET_TICKER,list);
        //订阅合约
        SLSDKAgent.sendContractSubscribe(LogicWebSocketSpot.WEBSOCKET_TICKER,0);
		//取消合约监听
        SLSDKAgent.unRegisterContractListener(this);
        //断开WebSocket链接
        SLSDKAgent.disconnectLogicWebSocket();

    /**
     * @param actionType LogicSDKState.STATE_LOGIN  登录
     *                   LogicSDKState.STATE_LOGOUT  退出登录
     *                   LogicSDKState.STATE_BIND   绑卡
     */
    @Override
    public void onEvent(int actionType) {
        switch (actionType){
            case STATE_LOGIN:
                //todo  登录成功调SLSDKAgent.bindSLUser();通知SDK
                break;

        }
    }
			
		
